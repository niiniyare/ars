// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirlineCompanyClient is the client API for AirlineCompany service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirlineCompanyClient interface {
	CreateAirlineCompany(ctx context.Context, in *CreateAirlineCompanyRequest, opts ...grpc.CallOption) (*CreateAirlineCompanyReply, error)
	DeleteAirlineCompany(ctx context.Context, in *DeleteAirlineCompanyRequest, opts ...grpc.CallOption) (*DeleteAirlineCompanyReply, error)
	GetAirlineCompany(ctx context.Context, in *GetAirlineCompanyRequest, opts ...grpc.CallOption) (*GetAirlineCompanyReply, error)
	ListAirlineCompany(ctx context.Context, in *ListAirlineCompanyRequest, opts ...grpc.CallOption) (*ListAirlineCompanyReply, error)
}

type airlineCompanyClient struct {
	cc grpc.ClientConnInterface
}

func NewAirlineCompanyClient(cc grpc.ClientConnInterface) AirlineCompanyClient {
	return &airlineCompanyClient{cc}
}

func (c *airlineCompanyClient) CreateAirlineCompany(ctx context.Context, in *CreateAirlineCompanyRequest, opts ...grpc.CallOption) (*CreateAirlineCompanyReply, error) {
	out := new(CreateAirlineCompanyReply)
	err := c.cc.Invoke(ctx, "/pb.AirlineCompany/CreateAirlineCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlineCompanyClient) DeleteAirlineCompany(ctx context.Context, in *DeleteAirlineCompanyRequest, opts ...grpc.CallOption) (*DeleteAirlineCompanyReply, error) {
	out := new(DeleteAirlineCompanyReply)
	err := c.cc.Invoke(ctx, "/pb.AirlineCompany/DeleteAirlineCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlineCompanyClient) GetAirlineCompany(ctx context.Context, in *GetAirlineCompanyRequest, opts ...grpc.CallOption) (*GetAirlineCompanyReply, error) {
	out := new(GetAirlineCompanyReply)
	err := c.cc.Invoke(ctx, "/pb.AirlineCompany/GetAirlineCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlineCompanyClient) ListAirlineCompany(ctx context.Context, in *ListAirlineCompanyRequest, opts ...grpc.CallOption) (*ListAirlineCompanyReply, error) {
	out := new(ListAirlineCompanyReply)
	err := c.cc.Invoke(ctx, "/pb.AirlineCompany/ListAirlineCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirlineCompanyServer is the server API for AirlineCompany service.
// All implementations must embed UnimplementedAirlineCompanyServer
// for forward compatibility
type AirlineCompanyServer interface {
	CreateAirlineCompany(context.Context, *CreateAirlineCompanyRequest) (*CreateAirlineCompanyReply, error)
	DeleteAirlineCompany(context.Context, *DeleteAirlineCompanyRequest) (*DeleteAirlineCompanyReply, error)
	GetAirlineCompany(context.Context, *GetAirlineCompanyRequest) (*GetAirlineCompanyReply, error)
	ListAirlineCompany(context.Context, *ListAirlineCompanyRequest) (*ListAirlineCompanyReply, error)
	mustEmbedUnimplementedAirlineCompanyServer()
}

// UnimplementedAirlineCompanyServer must be embedded to have forward compatible implementations.
type UnimplementedAirlineCompanyServer struct {
}

func (UnimplementedAirlineCompanyServer) CreateAirlineCompany(context.Context, *CreateAirlineCompanyRequest) (*CreateAirlineCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirlineCompany not implemented")
}
func (UnimplementedAirlineCompanyServer) DeleteAirlineCompany(context.Context, *DeleteAirlineCompanyRequest) (*DeleteAirlineCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirlineCompany not implemented")
}
func (UnimplementedAirlineCompanyServer) GetAirlineCompany(context.Context, *GetAirlineCompanyRequest) (*GetAirlineCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirlineCompany not implemented")
}
func (UnimplementedAirlineCompanyServer) ListAirlineCompany(context.Context, *ListAirlineCompanyRequest) (*ListAirlineCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAirlineCompany not implemented")
}
func (UnimplementedAirlineCompanyServer) mustEmbedUnimplementedAirlineCompanyServer() {}

// UnsafeAirlineCompanyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirlineCompanyServer will
// result in compilation errors.
type UnsafeAirlineCompanyServer interface {
	mustEmbedUnimplementedAirlineCompanyServer()
}

func RegisterAirlineCompanyServer(s grpc.ServiceRegistrar, srv AirlineCompanyServer) {
	s.RegisterService(&AirlineCompany_ServiceDesc, srv)
}

func _AirlineCompany_CreateAirlineCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAirlineCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineCompanyServer).CreateAirlineCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlineCompany/CreateAirlineCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineCompanyServer).CreateAirlineCompany(ctx, req.(*CreateAirlineCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlineCompany_DeleteAirlineCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAirlineCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineCompanyServer).DeleteAirlineCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlineCompany/DeleteAirlineCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineCompanyServer).DeleteAirlineCompany(ctx, req.(*DeleteAirlineCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlineCompany_GetAirlineCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirlineCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineCompanyServer).GetAirlineCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlineCompany/GetAirlineCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineCompanyServer).GetAirlineCompany(ctx, req.(*GetAirlineCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlineCompany_ListAirlineCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAirlineCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineCompanyServer).ListAirlineCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlineCompany/ListAirlineCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineCompanyServer).ListAirlineCompany(ctx, req.(*ListAirlineCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AirlineCompany_ServiceDesc is the grpc.ServiceDesc for AirlineCompany service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirlineCompany_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AirlineCompany",
	HandlerType: (*AirlineCompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAirlineCompany",
			Handler:    _AirlineCompany_CreateAirlineCompany_Handler,
		},
		{
			MethodName: "DeleteAirlineCompany",
			Handler:    _AirlineCompany_DeleteAirlineCompany_Handler,
		},
		{
			MethodName: "GetAirlineCompany",
			Handler:    _AirlineCompany_GetAirlineCompany_Handler,
		},
		{
			MethodName: "ListAirlineCompany",
			Handler:    _AirlineCompany_ListAirlineCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carier.proto",
}
